import java.util.*;
import java.io.*;
class Node{
    Node left,right;
    int data;
    Node(int data){
        this.data=data;
        left=right=null;
    }
}
class Solution{

static void levelOrder(Node root){
    
//Take queue since it's FIFO - add node check left right elements. Keepp adding left elements if available and right elements if available
    
      Queue<Node> myQueue = new LinkedList<>();
      myQueue.add(root);
      
      while(!myQueue.isEmpty()) {
          
          //Take out node we first added
          Node current = myQueue.poll(); //prints 3 to start with, then adds 2,5
           System.out.print(current.data + " ");
      
      
        // add left elements from root if it's not null
        if (current.left != null) {.       //adds 2
           myQueue.add(current.left);
        }
        
        // add right elements from root if it's not null
        if (current.right != null) {.      //adds 5
            myQueue.add(current.right);
        }
      }
    }

public static Node insert(Node root,int data){
        if(root==null){
            return new Node(data);
        }
        else{
            Node cur;
            if(data<=root.data){
                cur=insert(root.left,data);
                root.left=cur;
            }
            else{
                cur=insert(root.right,data);
                root.right=cur;
            }
            return root;
        }
    }
    public static void main(String args[]){
            Scanner sc=new Scanner(System.in);
            int T=sc.nextInt();
            Node root=null;
            while(T-->0){
                int data=sc.nextInt();
                root=insert(root,data);
            }
            levelOrder(root);
        }    
}
